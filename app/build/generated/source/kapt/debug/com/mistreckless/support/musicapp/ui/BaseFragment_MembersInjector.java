// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.mistreckless.support.musicapp.ui;

import dagger.MembersInjector;
import javax.inject.Provider;

public final class BaseFragment_MembersInjector<
        P extends BasePresenter<?, ?>, F extends BasePresenterProviderFactory<? extends P>>
    implements MembersInjector<BaseFragment<P, F>> {
  private final Provider<F> presenterFactoryProvider;

  public BaseFragment_MembersInjector(Provider<F> presenterFactoryProvider) {
    this.presenterFactoryProvider = presenterFactoryProvider;
  }

  public static <P extends BasePresenter<?, ?>, F extends BasePresenterProviderFactory<? extends P>>
      MembersInjector<BaseFragment<P, F>> create(Provider<F> presenterFactoryProvider) {
    return new BaseFragment_MembersInjector<P, F>(presenterFactoryProvider);
  }

  @Override
  public void injectMembers(BaseFragment<P, F> instance) {
    injectPresenterFactory(instance, presenterFactoryProvider.get());
  }

  public static <P extends BasePresenter<?, ?>, F extends BasePresenterProviderFactory<? extends P>>
      void injectPresenterFactory(BaseFragment<P, F> instance, F presenterFactory) {
    instance.presenterFactory = presenterFactory;
  }
}
