// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.mistreckless.support.musicapp.app;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.support.v4.app.Fragment;
import com.mistreckless.support.musicapp.domain.Api;
import com.mistreckless.support.musicapp.domain.DataModule;
import com.mistreckless.support.musicapp.domain.DataModule_ProvideApiFactory;
import com.mistreckless.support.musicapp.domain.DataModule_ProvidePreferencesFactory;
import com.mistreckless.support.musicapp.domain.RepositoryModule;
import com.mistreckless.support.musicapp.domain.RepositoryModule_ProvideUserRepositoryFactory;
import com.mistreckless.support.musicapp.domain.repository.UserRepository;
import com.mistreckless.support.musicapp.ui.BaseActivity_MembersInjector;
import com.mistreckless.support.musicapp.ui.BaseFragment_MembersInjector;
import com.mistreckless.support.musicapp.ui.main.MainActivity;
import com.mistreckless.support.musicapp.ui.main.MainActivityFragmentProvider_ProvideProfile;
import com.mistreckless.support.musicapp.ui.main.MainActivityFragmentProvider_ProvideWall;
import com.mistreckless.support.musicapp.ui.main.MainPresenterProviderFactory;
import com.mistreckless.support.musicapp.ui.main.MainPresenterProviderFactory_Factory;
import com.mistreckless.support.musicapp.ui.profile.Profile;
import com.mistreckless.support.musicapp.ui.profile.ProfilePresenterProviderFactory;
import com.mistreckless.support.musicapp.ui.profile.ProfilePresenterProviderFactory_Factory;
import com.mistreckless.support.musicapp.ui.wall.Wall;
import com.mistreckless.support.musicapp.ui.wall.WallPresenterProviderFactory;
import com.mistreckless.support.musicapp.ui.wall.WallPresenterProviderFactory_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<Api> provideApiProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> providesContextProvider;

  private Provider<SharedPreferences> providePreferencesProvider;

  private Provider<UserRepository> provideUserRepositoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.provideApiProvider =
        DoubleCheck.provider(DataModule_ProvideApiFactory.create(builder.dataModule));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.providesContextProvider =
        AppModule_ProvidesContextFactory.create(builder.appModule, applicationProvider);
    this.providePreferencesProvider =
        DoubleCheck.provider(
            DataModule_ProvidePreferencesFactory.create(
                builder.dataModule, providesContextProvider));
    this.provideUserRepositoryProvider =
        DoubleCheck.provider(
            RepositoryModule_ProvideUserRepositoryFactory.create(
                builder.repositoryModule, provideApiProvider, providePreferencesProvider));
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectActivityDispatchAndroidInjector(
        instance,
        DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
            Collections
                .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
                    singletonMap(
                        MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)));
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private DataModule dataModule;

    private AppModule appModule;

    private RepositoryModule repositoryModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application arg0) {
      this.application = Preconditions.checkNotNull(arg0);
      return this;
    }

    @Override
    public Builder repositoryModule(RepositoryModule arg02) {
      this.repositoryModule = Preconditions.checkNotNull(arg02);
      return this;
    }

    @Override
    public Builder dataModule(DataModule arg03) {
      this.dataModule = Preconditions.checkNotNull(arg03);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityBuilder_BindMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilder_BindMainActivity.MainActivitySubcomponent {
    private Provider<MainActivityFragmentProvider_ProvideWall.WallSubcomponent.Builder>
        wallSubcomponentBuilderProvider;

    private Provider<MainActivityFragmentProvider_ProvideProfile.ProfileSubcomponent.Builder>
        profileSubcomponentBuilderProvider;

    private Provider<MainPresenterProviderFactory> mainPresenterProviderFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.wallSubcomponentBuilderProvider =
          new Provider<MainActivityFragmentProvider_ProvideWall.WallSubcomponent.Builder>() {
            @Override
            public MainActivityFragmentProvider_ProvideWall.WallSubcomponent.Builder get() {
              return new WallSubcomponentBuilder();
            }
          };
      this.profileSubcomponentBuilderProvider =
          new Provider<MainActivityFragmentProvider_ProvideProfile.ProfileSubcomponent.Builder>() {
            @Override
            public MainActivityFragmentProvider_ProvideProfile.ProfileSubcomponent.Builder get() {
              return new ProfileSubcomponentBuilder();
            }
          };
      this.mainPresenterProviderFactoryProvider =
          DoubleCheck.provider(
              MainPresenterProviderFactory_Factory.create(
                  DaggerAppComponent.this.provideUserRepositoryProvider));
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectFragmentDispatcher(
          instance,
          DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
              MapBuilder
                  .<Class<? extends Fragment>,
                      Provider<AndroidInjector.Factory<? extends Fragment>>>
                      newMapBuilder(2)
                  .put(Wall.class, (Provider) wallSubcomponentBuilderProvider)
                  .put(Profile.class, (Provider) profileSubcomponentBuilderProvider)
                  .build()));
      BaseActivity_MembersInjector.injectPresenterProviderFactory(
          instance, mainPresenterProviderFactoryProvider.get());
      return instance;
    }

    private final class WallSubcomponentBuilder
        extends MainActivityFragmentProvider_ProvideWall.WallSubcomponent.Builder {
      private Wall seedInstance;

      @Override
      public MainActivityFragmentProvider_ProvideWall.WallSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(Wall.class.getCanonicalName() + " must be set");
        }
        return new WallSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(Wall arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class WallSubcomponentImpl
        implements MainActivityFragmentProvider_ProvideWall.WallSubcomponent {
      private Provider<WallPresenterProviderFactory> wallPresenterProviderFactoryProvider;

      private WallSubcomponentImpl(WallSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final WallSubcomponentBuilder builder) {
        this.wallPresenterProviderFactoryProvider =
            DoubleCheck.provider(
                WallPresenterProviderFactory_Factory.create(
                    DaggerAppComponent.this.provideUserRepositoryProvider));
      }

      @Override
      public void inject(Wall arg0) {
        injectWall(arg0);
      }

      private Wall injectWall(Wall instance) {
        BaseFragment_MembersInjector.injectPresenterFactory(
            instance, wallPresenterProviderFactoryProvider.get());
        return instance;
      }
    }

    private final class ProfileSubcomponentBuilder
        extends MainActivityFragmentProvider_ProvideProfile.ProfileSubcomponent.Builder {
      private Profile seedInstance;

      @Override
      public MainActivityFragmentProvider_ProvideProfile.ProfileSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(Profile.class.getCanonicalName() + " must be set");
        }
        return new ProfileSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(Profile arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ProfileSubcomponentImpl
        implements MainActivityFragmentProvider_ProvideProfile.ProfileSubcomponent {
      private Provider<ProfilePresenterProviderFactory> profilePresenterProviderFactoryProvider;

      private ProfileSubcomponentImpl(ProfileSubcomponentBuilder builder) {
        initialize(builder);
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ProfileSubcomponentBuilder builder) {
        this.profilePresenterProviderFactoryProvider =
            DoubleCheck.provider(
                ProfilePresenterProviderFactory_Factory.create(
                    DaggerAppComponent.this.provideUserRepositoryProvider));
      }

      @Override
      public void inject(Profile arg0) {
        injectProfile(arg0);
      }

      private Profile injectProfile(Profile instance) {
        BaseFragment_MembersInjector.injectPresenterFactory(
            instance, profilePresenterProviderFactoryProvider.get());
        return instance;
      }
    }
  }
}
